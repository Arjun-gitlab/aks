name: CI-CD Pipeline
 
on:
  push:
    branches:
      - main
    workflow_dispatch:            # Manual trigger from Actions tab
    inputs:
      environment:
        description: 'Choose environment (dev, stag, prod)'
        required: true
        default: 'dev'
 
env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  TF_BACKEND_RG: ${{ secrets.TF_BACKEND_RG }}
  TF_BACKEND_STORAGE_ACCOUNT: ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}
  TF_BACKEND_CONTAINER: ${{ secrets.TF_BACKEND_CONTAINER }}
  AKS_RG: ${{ secrets.AKS_RG }}
  AKS_CLUSTER: ${{ secrets.AKS_CLUSTER }}
 
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
 
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
 
      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_NAME }}
 
      - name: Build patient image
        run: |
          echo "ðŸ”Ž Using ACR: ${{ env.ACR_NAME }}"
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/patient-service:latest ./microservices/patient-service
 
      - name: Push patient image
        run: docker push ${{ env.ACR_NAME }}.azurecr.io/patient-service:latest
 
      - name: Build appointment image
        run: |
          echo "ðŸ”Ž Using ACR: ${{ env.ACR_NAME }}"
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/appointment-service:latest ./microservices/appointment-service
 
      - name: Push appointment image
        run: docker push ${{ env.ACR_NAME }}.azurecr.io/appointment-service:latest
 
  deploy-terraform:
    runs-on: ubuntu-latest
 
    env:
      # Azure credentials for Terraform (Service Principal)
      ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
 
    steps:
      - uses: actions/checkout@v3
 
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
 
      - name: Prepare Environment
        run: |
          ENV="${{ github.event.inputs.environment }}"
          echo "Deploying to environment: $ENV"
          # Copy environment-specific backend file into root so terraform init uses it
          cp terraform/envs/$ENV/backend.tf terraform/backend.tf
        shell: bash
 
      - name: Terraform Init
        working-directory: terraform
        run: terraform init
 
      - name: Select/Create Workspace
        working-directory: terraform
        run: |
          ENV="${{ github.event.inputs.environment }}"
          terraform workspace select "$ENV" || terraform workspace new "$ENV"
        shell: bash
 
      - name: Terraform Apply
        working-directory: terraform
        run: |
          ENV="${{ github.event.inputs.environment }}"
          # if you have tfvars per env (e.g. terraform/envs/dev/dev.tfvars)
          if [ -f "envs/$ENV/$ENV.tfvars" ]; then
            terraform apply -auto-approve -var-file=envs/$ENV/$ENV.tfvars
          else
            terraform apply -auto-approve
          fi
 
  deploy-aks:
    needs: deploy-terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
 
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
 
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.AKS_RG }} \
            --name ${{ env.AKS_CLUSTER }} \
            --overwrite-existing
 
      - name: Deploy patient service
        run: kubectl apply -f k8s/patient-deployment.yaml
 
      - name: Deploy appointment service
        run: kubectl apply -f k8s/appointment-deployment.yaml
